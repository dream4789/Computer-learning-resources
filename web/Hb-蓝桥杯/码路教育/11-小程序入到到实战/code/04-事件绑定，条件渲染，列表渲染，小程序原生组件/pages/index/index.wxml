
<view>---------------- 16)轮播组件</view>
<view class="page">
  <swiper indicator-dots="true" indicator-color="yellow" interval="3000" autoplay="true">
    <swiper-item>
      <image style="width: 100%;" src="../../assets/001.jpg" alt=""></image>
    </swiper-item>
    <swiper-item>
      <image style="width: 100%;"  src="../../assets/001.jpg" alt=""></image>
    </swiper-item>
  </swiper>
</view>

<view>---------------- 15)滚动视图</view>
<scroll-view class="tab" scroll-x >
  <text class="item">新闻1</text>
  <text class="item">新闻2</text>
  <text class="item">新闻3</text>
  <text class="item">新闻4</text>
  <text class="item">新闻5</text>
  <text class="item">新闻6</text>
  <text class="item">新闻7</text>
  <text class="item">新闻8</text>
  <text class="item">新闻9</text>
  <text class="item">新闻10</text>
</scroll-view>
<scroll-view scroll-x class="container-x">
  <view wx:for="{{10}}" wx:key="{{index}}" class="item01"></view>
</scroll-view>
<scroll-view scroll-y class="container-y">
  <view wx:for="{{10}}" wx:key="{{index}}" class="item02"></view>
</scroll-view>

<view>---------------- 14)input组件</view>
<view class="page">
  <!-- 后面写项目，会使用vant  小程序版本的vant组件库 -->
  <input auto-focus placeholder="将会获取焦点"/>
  <!-- 那个type="number"手机上只拉起数字键盘，但是不能限制其他字母输入 -->
  <input type="number" auto-focus placeholder="将会获取焦点"/>
</view>

<view>---------------- 13)icon组件</view>
<view class="page">
  <view class="icon-box">
    <icon class="icon-box-img" type="success"></icon>
    <icon class="icon-box-img" type="info"></icon>
    <icon class="icon-box-img" type="warn"></icon>
    <icon class="icon-box-img" type="waiting"></icon>
    <icon class="icon-box-img" type="cancel" size="30"></icon>
  </view>
</view>

<view>---------------- 12)progress组件</view>
<view class="page">
  <progress percent="20" show-info stroke-width="20"/>
  <progress percent="20" show-info border-radius="10" stroke-width="10"/>
  <!-- 动态的进度条 -->
  <progress percent="60" color="#10AEFF" active stroke-width="30" />
</view>

<view>---------------- 11)image组件</view>
<view class="page">
  <!-- 开发小程序时，一般都是使用网络图片 -->
  <!-- 因为开发好的小程序，发布是有大小限制，分包 -->
  <image src="http://mmbiz.qpic.cn/sz_mmbiz_jpg/GEWVeJPFkSEz7tgvlaTtv2MYO01RZr0y2lKyiby6STpicpYB2a46S17caRhHMDhotyz62xeNAwc5CibskvQH3eKwg/0?wx_fmt=jpeg"></image>

  <!-- 一个image组件，默认大小是320*240 --> 
  <button bindtap="handleChooseAlbum">拍照/相册</button>
  <image src="{{imgPath}}"></image>

  <!-- 一个image组件，默认大小是320*240 -->
  <image src="../../assets/001.jpg" show-menu-by-longpress></image>
</view>

<view>---------------- 10)button组件</view>
<view class="page">
  <button>默认按钮</button>
  <!-- size -->
  <button size="mini">按钮</button>
  <button size="mini">按钮</button>
  <!-- type -->
  <button size="mini" type="primary">按钮</button>
  <button size="mini" type="warn">按钮</button>
  <!-- plain 镂空-->
  <button size="mini" type="primary" plain="{{true}}">按钮</button>
  <!-- disabled -->
  <button size="mini" type="primary" disabled="{{true}}">按钮</button>
  <!-- loading -->
  <button size="mini" type="primary" loading="{{true}}">按钮</button>
  <!-- hover-class -->
  <button size="mini" hover-class="pressed">按钮</button>
  <!-- open-type 微信提供的一些能力-->
  <button size="mini" hover-class="pressed" open-type="contact">客服</button>
  <button size="mini" hover-class="pressed" open-type="share">分享</button>
  <button size="mini" hover-class="pressed" open-type="getPhoneNumber">获取电话</button>
  <button size="mini" hover-class="pressed" open-type="getUserInfo">获取用户信息</button>
</view>

<view>---------------- 9)text组件</view>
<view class="page">
  <!-- span怎么用，text就怎么用 -->
  <!-- \n 类似于br标签 -->
  <text>首页面 \n</text><text>首页面 \n</text><text>首页面 \n</text>
  <text selectable="{{true}}">码路教育 \n</text>
  <text selectable="{{false}}">码路教育 \n</text>
  <text user-select="{{true}}">码路教育 \n</text>
  <view></view>
  <text space="ensp">码路   教育 \n</text>
  <text space="emsp">码路   教育 \n</text>
  <text space="nbsp">码路   教育 \n</text>
  <text>2 > 1 \n</text>
  <text decode>2 &gt; 1</text>
</view>

<view>---------------- 8)全局样式</view>
<!-- 全局样式定义在app.wxss中，针对所有页面 -->
<!-- 如果页面中有自己的样式，全局中也有，页面中样式优先给是高于全局样式 -->
<view class="page container">
</view>

<view>---------------- 7)外部样式</view>
<view class="page item">
  我是一个孤独的DIV
</view>

<view>---------------- 6)行内样式</view>
<!-- 
  px：如果是px单位的话，盒子的大小，就固定死了
  适配：小屏上显示小盒子，大屏上显示大盒子
  在小程序中，提供了一个单位：rpx  类似于rem  相对单位
  在iphone6上  2rpx = 1px
 -->
 <view class="page" style="width: 200rpx; height: 200rpx; background-color: gold;">
</view>
 <view class="page" style="width: 100px; height: 100px; background-color: gold;">
</view>
<view class="page" style="width: 200px; height: 200px; background-color: gold;">
</view>

<view>---------------- 5)block标签</view>
<!-- block标签，就等价于vue中tempate标签 -->
<view class="page">
    <block wx:if="{{true}}">
      <view>姓名：malu</view>
      <view>年龄：18</view>
    </block>

    <block wx:else>
      <view>姓名：wc</view>
      <view>年龄：28</view>
    </block>
</view>

<view>---------------- 4)hidden控制元素的显示与隐藏</view>
<!-- 
  wx:if 和 hidden区别：
    wx:if 控制创建或销毁
    hidden 控制样式显示或隐藏  

    如果频繁切换：推荐使用hidden
 -->
<view class="page">
  <button size="mini" bindtap="onToggle2">切换显示成隐藏</button>
  <view hidden="{{isShow}}">我是一个孤独的DIV</view>
</view>

<view>---------------- 3)列表渲染</view>
<view class="page">
  <!-- 给item和index起别名 -->
  <view wx:for="{{singers}}" wx:for-item="singer" wx:for-index="i" wx:key="{{index}}">{{singer}} --- {{i}}</view>
  <view>--------</view>
  <!-- 循环一个数组 -->
  <view wx:for="{{singers}}" wx:key="{{index}}">{{item}} --- {{index}}</view>
  <!-- 循环一个对象 -->
  <view wx:for="{{ {name:'wc',age:18} }}" wx:key="{{index}}">{{item}} --- {{index}}</view>
  <!-- 循环一个数字 -->
  <view wx:for="{{11}}" wx:key="index">{{item}} --- {{index}}</view>
  <!-- 循环一个字符串 -->
  <view wx:for="malu" wx:key="index">{{item}} --- {{index}}</view>
  <view wx:for="{{'malu'}}" wx:key="index">{{item}} --- {{index}}</view>
</view>

<view>---------------- 2)条件渲染</view>
<view class="page">
  <view wx:if="{{true}}">我是一个孤独的DIV</view>
  <button size="mini" bindtap="onToggle2">切换显示成隐藏</button>
  <!-- wx:if是控制div销毁或创建 -->
  <view wx:if="{{isShow}}" style="color: skyblue">我是一个孤独的DIV</view>
  <!-- 在调试面板中，你修改了数据，界面会重新渲染，不是因为数据是响应式数据 -->
  <!-- 是由于你修改了data中的数据，它内部会自动调用setData -->
  <!-- 在react中数据也不是响应式的，你需要调用setState -->
  <view wx:if="{{score >= 90}}">优秀</view>
  <view wx:elif="{{score >= 80}}">良好</view>
  <view wx:elif="{{score >= 60}}">及格</view>
  <view wx:else>不及格</view>
</view>

<view>---------------- 1)数据绑定</view>
<view class="page">
  <!-- {{}} 里面只要写值就OK -->
  <view>{{msg}}</view>
  <view>网站：{{site}},年龄：{{age}}</view>
  <view>{{age>18 ? "成年人" : "未成年"}}</view>
  <view>{{age * 10}}</view>
  <view class="box1 {{ showColor ? 'on' : ''}}">来点颜色</view>
  <button size="mini" bindtap="onToggle">不要字体颜色</button>
</view>