## 数组

-- 数组增删改
* Array.of(...items) 返回新数组 将参数中所有值作为元素形成数组
* arr.push() 数组尾部添加，arr.pop() 尾部取出，arr.shift() 首端取出，arr.unshift() 首端插入
* arr.splice(pos,deleteCount,...item) 返回被修改的元素，会改变原数组从pos开始删除deleteCount个元素，并在当前位置插入items
* arr.slice(start,end) 返回新数组，浅拷贝，将start到end(不包括end)的元素复制进去，并返回
* arr.concat(...items) 返回新数组，复制当前数组的所有元素，并添加items的元素
arr.copyWithin(pos[, start[, end]]) 浅拷贝，返回改变后的数组，复制从start到end(不包括end)的元素，到pos开始的索引
* arr.fill(value[, start[, end]]) 返回修改后的值，从start到end默认length，填充val

-- 搜索元素
* arr.indexOf(item[,pos]) 从pos开始搜索item，搜索到返回索引，没找到返回-1，默认全部查找。arr.lastIndexOf(item[,pos]),位置从后面开始计算
* arr.includes(val) 如果数组有val，返回true，否则false
* arr.find(callback(element[, index[, array]])[, thisArg]) 通过func过滤元素，返回使func为true的第一个值。
arr.findIndex(callback(element[, index[, array]])[, thisArg]) 类似find，返回索引，不是值,没找到返回-1

-- 遍历元素
* arr.forEach(callback(currentValue [, index [, array]])[, thisArg]) 对每个元素调用func，不返回任何值
arr.entries/keys/values() 返回新的数组迭代器对象，该对象包含数组中每个索引的键/值对[key,val]/[key]/[values]，可用next()遍历，value()查看值
* arr.every(callback(element[,index[,array]])[, thisArg])) 返回boolean，
	callback(element[,index[,array]])为测试数组元素的函数,el为测试当前值，
	index为当前索引，array为调用的数组本身。
	如果每次回调函数都返回true则函数返回true，否则false
* arr.some(callback(element[, index[, array]])[, thisArg]) 返回boolean，类every，只要一个通过测试则返回true

-- 转换数组
arr.map(callback(currentValue[, index[, array]])[, thisArg]) 根据调用func的返回结果创建新数组
* arr.filter(callback(element[, index[, array]])[, thisArg]) 返回使func为true的全部值
arr.sort([compareFunction]) 对数组进行原位（in-place）排序，然后返回，func参数arg1：第一个比较的元素，arg2：第二个比较的元素
* arr.reverse() 原位反转数组，然后返回
* arr.join([separator]) 将数组转换为指定分隔符连成的字符串并返回，默认用','
arr.reduce/reducnRight(callback(accumulator, currentValue[, index[, array]])[, initialValue])返回函数累计处理的结果 通过对每个元素调用func，计算数组是的单个值，并在调用之间传递中间结果。accum累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue(初始accum的值，如果没有则用数组第一个元素)。
* Array.isArray(arr) 检查arr是否为数组
Array.from(arrayLike[,mapFn[,this.Arg]]) 返回新数组,浅拷贝，将类数组对象或可迭代对象转化为数组,
	第二参数：用于对每个元素进行处理，放入数组的是处理后的元素。
	第三参数：用于指定第二参数执行时的this对象
* arr.flat([depth])返回新数组，depth维数组转一维
arr.flatMap(callback(currentValue[, index[, array]])[, thisArg])) 对flat的转换有回调函数的处理
* arr.toString(callback(currentValue[, index[, array]])[, thisArg])返回字符串，数组转字符串
arr.toLocaleString([locales[,options]])返回数组元素的字符串，
	locales为带有BCp 47语言标记的字符串或者字符串数组，
	options为可配置对象，对于数字 Number.prototype.toLocaleString()，对于日期Date.prototype.toLocaleString()

-- 属性方法
arr[Symbol.iterator]()默认与values()的返回值相同
Array[Symbol.species]返回数组的构造函数

-- Array 构造函数的方法
* Array.of(...items)
* Array.isArray(arr)
Array.from(arrayLike[,mapFn[,this.Arg]])
Array[Symbol.species]

-- 会影响原数组本身的方法
* pop()      尾部弹出一个元素
* push()     尾部插入一个元素
shift()    头部弹出一个元素
unshift()  头部插入一个元素
sort([func]) 对数组进行排序,func有2各参数，其返回值小于0，那么参数1被排列到参数2之前，反之参数2排在参数1之前
reverse()    原位反转数组中的元素
* splice(pos,deleteCount,...item)  返回修改后的数组，从pos开始删除deleteCount个元素，并在当前位置插入items
copyWithin(pos[, start[, end]])  复制从start到end(不包括end)的元素，到pos开始的索引，返回改变后的数组，浅拷贝
arr.fill(value[, start[, end]])  从start到end默认到数组最后一个位置，不包括end，填充val，返回填充后的数组



## 字符串

-- 字符串查找
* str.charAt(index)从一个字符串中返回指定索引的字符，index介于0-length-1
str.endsWith(searchString[, length])返回boolean，判断当前字符串是否是以另外一个给定的子字符串“结尾”的，length：作为 str 的长度。默认值为 str.length。
* str.includes(searchString[, position])返回boolean，判断一个字符串是否包含在另一个字符串中，从postition索引开始搜寻，默认0
* str.indexOf(searchValue [, fromIndex])返回第一次出现的索引，没有出现则为-1，fromIndex小于0则返回null，大于length返回-1
str.lastIndexOf(searchValue[, fromIndex])返回从字符串尾部开始第一次出现的索引，没有则-1，fromIndex的值相对于从尾部开始的索引
str.match(regexp)返回值：如果g模式返回全部匹配结果，不会捕获，如果非g模式，返回第一个匹配结果及其捕获组，regexp正则表达式对象
str.matchAll(regexp)返回一个所有匹配的结果及分组捕获组的迭代器，迭代器只能使用一次
str.search(regexp)返回首次匹配到的索引，没有则-1，执行正则表达式和 String 对象之间的一个搜索匹配
str.startsWith(searchString[, position])返回boolean，判断str是否以另外一个子字符串pos位置开头，pos为开始搜索的位置，默认从str头部开始
s.toString()返回一个表示调用对象的字符串，该方法返回指定对象的字符串形式
* str.valueOf()返回一个String对象的原始值，该值等同String.prototype.toString()，通常在js内部调用
string[Symbol.iterator]返回一个新的迭代器对象，它遍历字符串的代码点，返回每一个代码点的字符串值。
String.raw(callSite, ...substitutions)、String.raw`templateString`
	返回给定模板字符串的元素字符串，
	callSite：一个模板字符串的“调用点对象”，
	...substitutions：任意个可选的参数，表示任意个内插表达式对应的值，
	templateString：模板字符串，可包含占位符（${...}）

-- 字符串操作
* str.trim()返回去掉两端空白后的新字符串
str.trimEnd/trimRight()返回去除末(右)端空白的新字符串
str.trimStart/trimLeft()返回去除开头(左)端空格的新字符串
* str.split([separator[, limit]])返回一个以指定分隔符出现位置分隔而成的一个数组，数组元素不包含分隔符，limit限制返回的分割片段(默认全返回)
* str.slice(beginIndex[, endIndex])返回新字符串，从原str中返回beagin索引到end(不包含)索引(默认到尾部)的新字符串
str.padEnd(targetLength [, padString])返回新字符串，用一个字符串填充当前字符串(可重复)，返回填充后达到指定长度的字符串，从尾部开始填充
str.padStart(targetLength [, padString])返回新字符串，用另一个字符串填充当前字符串(可重复)，直到给定的长度。填充从当前字符串头部开始
str.repeat(count)返回一个新字符串，重复str字符串count次，返回拼接之后的新字符串
str.replace(regexp|substr, newSubStr|function)返回新字符串，
	参数1：如果是正则会匹配所有满足匹配条件的内容，如果是字符串则只会匹配第一个满足的内容。
	参数2：如果是字符串则此串会替换参数1匹配到的内容，如果是func，将会把func的返回值替换匹配的内容
referenceStr.localeCompare(compareString[, locales[, options]])返回值：如果引用字符存在于比较字符之前则为负数; 如果引用字符存在于比较字符之后则为正数; 相等的时候返回 0
str.concat(string2, string3[, ..., stringN])返回新的字符串，将一个或多个字符串与原字符串连接合并
str.substring(indexStart[, indexEnd])返回新字符串，返回一个字符串在开始索引到结束索引(不包括)之间的一个子集

-- 字符串转换
str.toLocaleLowerCase([locale, locale, ...])返回新字符串，locale 为指明要转换成小写格式的特定语言区域，返回调用字符串被转换为小写的格式。
str.toLocaleUpperCase([locale, locale, ...])返回新字符串，locale 参数指明要转换成大写格式的特定语言区域，根据本地化的大小写映射规则将输入的字符串转化成大写的格式
* str.toLowerCase()返回新字符串，将调用该方法的字符串值转为小写形式，并返回
* str.toUpperCase()返回一个新字符串，将调用字符串转换为大写形式返回

-- 字符串转码
String.fromCharCode(num1, ..., numN) 返回长度为N的字符串，参数：UTF-16代码单元的数字。 范围介于0到65535（0xFFFF）之间。
String.fromCodePoint(num1[, ...[, numN]])返回指定Unicode编码位置创建的字符串，参数：一串Unicode编码位置
str.charCodeAt(index)返回给定索引位置字符的UTF-16编码，索引超过length-1则返回NaN
str.codePointAt(pos)返回值为给定位置字符的 一个 Unicode 编码数字
str.normalize([form])返回给定的 Unicode 规范化形式的字符串，按照指定的一种 Unicode 正规形式将当前字符串正规化

-- 字符串静态方法
String.raw(callSite, ...substitutions)、String.raw`templateString`
String.fromCharCode()
String.fromCodePoint()
